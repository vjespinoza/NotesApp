[{"D:\\ReactApps\\notes-app\\src\\index.js":"1","D:\\ReactApps\\notes-app\\src\\App.js":"2","D:\\ReactApps\\notes-app\\src\\appStyles.js":"3","D:\\ReactApps\\notes-app\\src\\components\\NavBar\\NavBar.js":"4","D:\\ReactApps\\notes-app\\src\\components\\NavBar\\style.js":"5","D:\\ReactApps\\notes-app\\src\\theme\\theme.js":"6","D:\\ReactApps\\notes-app\\src\\components\\SideBar\\Sidebar.js":"7","D:\\ReactApps\\notes-app\\src\\components\\SideBar\\style.js":"8","D:\\ReactApps\\notes-app\\src\\components\\Dashboard\\Dashboard.js":"9","D:\\ReactApps\\notes-app\\src\\components\\Dashboard\\style.js":"10","D:\\ReactApps\\notes-app\\src\\components\\Note\\Note.js":"11","D:\\ReactApps\\notes-app\\src\\components\\Note\\style.js":"12","D:\\ReactApps\\notes-app\\src\\components\\CreateNote\\CreateNote.js":"13","D:\\ReactApps\\notes-app\\src\\components\\CreateNote\\style.js":"14","D:\\ReactApps\\notes-app\\src\\components\\NotesList\\NotesList.js":"15","D:\\ReactApps\\notes-app\\src\\components\\NotesList\\style.js":"16","D:\\ReactApps\\notes-app\\src\\components\\FormReminder\\FormReminder.js":"17","D:\\ReactApps\\notes-app\\src\\components\\FormReminder\\style.js":"18","D:\\ReactApps\\notes-app\\src\\components\\FormColorPick\\FormColor.js":"19","D:\\ReactApps\\notes-app\\src\\components\\FormColorPick\\style.js":"20","D:\\ReactApps\\notes-app\\src\\components\\FormTag\\FormTag.js":"21","D:\\ReactApps\\notes-app\\src\\components\\FormTag\\style.js":"22","D:\\ReactApps\\notes-app\\src\\components\\Footer\\Footer.js":"23","D:\\ReactApps\\notes-app\\src\\components\\Footer\\style.js":"24","D:\\ReactApps\\notes-app\\src\\hooks\\useClickOutside.js":"25"},{"size":410,"mtime":1612296551829,"results":"26","hashOfConfig":"27"},{"size":513,"mtime":1618000783517,"results":"28","hashOfConfig":"27"},{"size":255,"mtime":1612308088173,"results":"29","hashOfConfig":"27"},{"size":1823,"mtime":1615219838380,"results":"30","hashOfConfig":"27"},{"size":915,"mtime":1613149570188,"results":"31","hashOfConfig":"27"},{"size":646,"mtime":1612555995313,"results":"32","hashOfConfig":"27"},{"size":2079,"mtime":1615219822300,"results":"33","hashOfConfig":"27"},{"size":381,"mtime":1613149627327,"results":"34","hashOfConfig":"27"},{"size":548,"mtime":1618001331070,"results":"35","hashOfConfig":"27"},{"size":612,"mtime":1614119628479,"results":"36","hashOfConfig":"27"},{"size":2421,"mtime":1618000904388,"results":"37","hashOfConfig":"27"},{"size":1161,"mtime":1616021577196,"results":"38","hashOfConfig":"27"},{"size":1457,"mtime":1618000783815,"results":"39","hashOfConfig":"27"},{"size":1618,"mtime":1616013661205,"results":"40","hashOfConfig":"27"},{"size":660,"mtime":1618000783743,"results":"41","hashOfConfig":"27"},{"size":312,"mtime":1616021138746,"results":"42","hashOfConfig":"27"},{"size":894,"mtime":1618000783744,"results":"43","hashOfConfig":"27"},{"size":668,"mtime":1616020450940,"results":"44","hashOfConfig":"27"},{"size":2453,"mtime":1618000783743,"results":"45","hashOfConfig":"27"},{"size":858,"mtime":1616011646937,"results":"46","hashOfConfig":"27"},{"size":2635,"mtime":1618000783744,"results":"47","hashOfConfig":"27"},{"size":667,"mtime":1615998907238,"results":"48","hashOfConfig":"27"},{"size":1612,"mtime":1618000783815,"results":"49","hashOfConfig":"27"},{"size":646,"mtime":1614810466134,"results":"50","hashOfConfig":"27"},{"size":441,"mtime":1615999147376,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1q63b0x",{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\ReactApps\\notes-app\\src\\index.js",[],["107","108"],"D:\\ReactApps\\notes-app\\src\\App.js",["109","110"],"D:\\ReactApps\\notes-app\\src\\appStyles.js",[],"D:\\ReactApps\\notes-app\\src\\components\\NavBar\\NavBar.js",[],"D:\\ReactApps\\notes-app\\src\\components\\NavBar\\style.js",[],"D:\\ReactApps\\notes-app\\src\\theme\\theme.js",[],"D:\\ReactApps\\notes-app\\src\\components\\SideBar\\Sidebar.js",[],"D:\\ReactApps\\notes-app\\src\\components\\SideBar\\style.js",[],"D:\\ReactApps\\notes-app\\src\\components\\Dashboard\\Dashboard.js",[],"D:\\ReactApps\\notes-app\\src\\components\\Dashboard\\style.js",[],"D:\\ReactApps\\notes-app\\src\\components\\Note\\Note.js",["111","112","113","114","115","116"],"D:\\ReactApps\\notes-app\\src\\components\\Note\\style.js",[],"D:\\ReactApps\\notes-app\\src\\components\\CreateNote\\CreateNote.js",[],"D:\\ReactApps\\notes-app\\src\\components\\CreateNote\\style.js",[],"D:\\ReactApps\\notes-app\\src\\components\\NotesList\\NotesList.js",[],"D:\\ReactApps\\notes-app\\src\\components\\NotesList\\style.js",[],"D:\\ReactApps\\notes-app\\src\\components\\FormReminder\\FormReminder.js",["117"],"import React, { useState, useRef } from \"react\";\r\nimport useStyles from \"./style\";\r\nimport {\r\n    FormControl,\r\n    Input,\r\n    Card,\r\n    Typography,\r\n    Button,\r\n} from \"@material-ui/core\";\r\n\r\nconst FormReminder = ({ toggleAlert, footerID, uniqueID }) => {\r\n    const classes = useStyles();\r\n\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const domRef = useRef(null);\r\n\r\n    const defaultDate = () => {\r\n        const todayDate = new Date();\r\n        const day =\r\n            todayDate.getDate() < 10\r\n                ? `0${todayDate.getDate()}`\r\n                : todayDate.getDate();\r\n        const month =\r\n            todayDate.getMonth() < 10\r\n                ? `0${todayDate.getMonth() + 1}`\r\n                : todayDate.getMonth();\r\n        const year = todayDate.getFullYear();\r\n\r\n        return `${year}-${month}-${day}`;\r\n    };\r\n\r\n    const defaultTime = () => {\r\n        const todayDate = new Date();\r\n        const hour =\r\n            todayDate.getHours() < 10\r\n                ? `0${todayDate.getHours()}`\r\n                : todayDate.getHours();\r\n        const minutes =\r\n            todayDate.getMinutes() < 10\r\n                ? `0${todayDate.getMinutes()}`\r\n                : todayDate.getMinutes();\r\n        return `${hour}:${minutes}`;\r\n    };\r\n\r\n    return (\r\n        <Card\r\n            ref={domRef}\r\n            id={\r\n                uniqueID === false ? `formReminder_${footerID}` : \"formReminder\"\r\n            }\r\n            className={classes.reminderForm}\r\n            style={{\r\n                opacity: isOpen === true ? 1 : 0,\r\n                visibility: isOpen === true ? \"visible\" : \"hidden\",\r\n            }}\r\n        >\r\n            <Typography className={classes.formTitle} variant=\"h3\">\r\n                Reminder:\r\n            </Typography>\r\n            <FormControl>\r\n                <Input\r\n                    className={classes.input}\r\n                    type=\"date\"\r\n                    id={uniqueID === false ? `date_${footerID}` : \"date\"}\r\n                    defaultValue={defaultDate()}\r\n                ></Input>\r\n            </FormControl>\r\n            <FormControl>\r\n                <Input\r\n                    className={classes.input}\r\n                    type=\"time\"\r\n                    id={uniqueID === false ? `time_${footerID}` : \"time\"}\r\n                    defaultValue={defaultTime()}\r\n                ></Input>\r\n            </FormControl>\r\n            <Button onClick={toggleAlert} className={classes.confirmReminder}>\r\n                Confirm\r\n            </Button>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default FormReminder;\r\n","D:\\ReactApps\\notes-app\\src\\components\\FormReminder\\style.js",[],"D:\\ReactApps\\notes-app\\src\\components\\FormColorPick\\FormColor.js",["118"],"import React, { useState, useRef } from \"react\";\r\nimport useStyles from \"./style\";\r\nimport {\r\n    FormControl,\r\n    RadioGroup,\r\n    Radio,\r\n    FormControlLabel,\r\n    Card,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport DoneOutlinedIcon from \"@material-ui/icons/DoneOutlined\";\r\n\r\nconst FormColor = ({ noteBgColor, setNoteBgColor, footerID, uniqueID }) => {\r\n    const classes = useStyles();\r\n\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const colorPalette = [\r\n        \"#ffffff\",\r\n        \"#f28b82\",\r\n        \"#fbbc04\",\r\n        \"#fff475\",\r\n        \"#ccff90\",\r\n        \"#a7ffeb\",\r\n        \"#4cc9f0\",\r\n        \"#aecbfa\",\r\n        \"#d7aefb\",\r\n        \"#fdcfe8\",\r\n        \"#e6c9a8\",\r\n        \"#d1c7c9\",\r\n    ];\r\n\r\n    const domRef = useRef(null);\r\n\r\n    const handleColorChange = (e) => {\r\n        setNoteBgColor(e.target.value);\r\n    };\r\n\r\n    return (\r\n        <Card\r\n            ref={domRef}\r\n            id={uniqueID === false ? `formColor_${footerID}` : \"formColor\"}\r\n            className={classes.colorForm}\r\n            style={{\r\n                opacity: isOpen === true ? 1 : 0,\r\n                visibility: isOpen === true ? \"visible\" : \"hidden\",\r\n            }}\r\n        >\r\n            <Typography className={classes.formTitle} variant=\"h3\">\r\n                Colors:\r\n            </Typography>\r\n            <FormControl>\r\n                <RadioGroup\r\n                    className={classes.colorList}\r\n                    value={noteBgColor}\r\n                    name=\"colorPick\"\r\n                >\r\n                    {colorPalette.map((color, index) => {\r\n                        return (\r\n                            <FormControlLabel\r\n                                key={index}\r\n                                value={color}\r\n                                onChange={handleColorChange}\r\n                                className={classes.input}\r\n                                style={{ background: color }}\r\n                                control={\r\n                                    <Radio\r\n                                        id={`color${index + 1}`}\r\n                                        icon=\"\"\r\n                                        disableRipple={true}\r\n                                        checkedIcon={\r\n                                            <DoneOutlinedIcon\r\n                                                style={{\r\n                                                    fontSize: \"2rem\",\r\n                                                    color: \"#6c757d\",\r\n                                                }}\r\n                                            />\r\n                                        }\r\n                                    />\r\n                                }\r\n                            ></FormControlLabel>\r\n                        );\r\n                    })}\r\n                </RadioGroup>\r\n            </FormControl>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default FormColor;\r\n","D:\\ReactApps\\notes-app\\src\\components\\FormColorPick\\style.js",[],"D:\\ReactApps\\notes-app\\src\\components\\FormTag\\FormTag.js",["119"],"import React, { useState, useRef } from \"react\";\r\nimport useStyles from \"./style\";\r\nimport {\r\n    FormControl,\r\n    Input,\r\n    Card,\r\n    Typography,\r\n    InputAdornment,\r\n    IconButton,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    Checkbox,\r\n    ListItemText,\r\n} from \"@material-ui/core\";\r\nimport AddOutlinedIcon from \"@material-ui/icons/AddOutlined\";\r\n\r\nconst FormTags = ({\r\n    footerID,\r\n    uniqueID,\r\n    tag,\r\n    setTag,\r\n    checked,\r\n    setChecked,\r\n    setNoteTag,\r\n}) => {\r\n    const classes = useStyles();\r\n\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const [query, setQuery] = useState(\"\");\r\n\r\n    const domRef = useRef(null);\r\n\r\n    const tags = tag;\r\n\r\n    const getNewTag = (e) => {\r\n        setQuery(e.target.value);\r\n    };\r\n\r\n    const submitTag = () => {\r\n        setTag(tag.concat(query));\r\n        setQuery(\"\");\r\n        document.getElementById(\"inputTag\").value = \"\";\r\n    };\r\n\r\n    const handleToggle = (value) => () => {\r\n        const currentIndex = checked.indexOf(value);\r\n        const newChecked = [...checked];\r\n\r\n        if (currentIndex === -1) {\r\n            newChecked.push(value);\r\n        } else {\r\n            newChecked.splice(currentIndex, 1);\r\n        }\r\n\r\n        setChecked(newChecked);\r\n        setNoteTag(newChecked);\r\n    };\r\n\r\n    return (\r\n        <Card\r\n            ref={domRef}\r\n            id={uniqueID === false ? `formTag_${footerID}` : \"formTag\"}\r\n            style={{\r\n                opacity: isOpen === true ? 1 : 0,\r\n                visibility: isOpen === true ? \"visible\" : \"hidden\",\r\n            }}\r\n            className={classes.formTag}\r\n        >\r\n            <Typography className={classes.formTitle} variant=\"h3\">\r\n                Tag note:\r\n            </Typography>\r\n            <FormControl>\r\n                <Input\r\n                    id={\r\n                        uniqueID === false ? `inputTag_${footerID}` : \"inputTag\"\r\n                    }\r\n                    className={classes.formInput}\r\n                    type=\"text\"\r\n                    onChange={getNewTag}\r\n                    placeholder=\"Type tag's name\"\r\n                    endAdornment={\r\n                        <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                                onClick={submitTag}\r\n                                aria-label=\"toggle password visibility\"\r\n                                edge=\"end\"\r\n                            >\r\n                                <AddOutlinedIcon />\r\n                            </IconButton>\r\n                        </InputAdornment>\r\n                    }\r\n                />\r\n            </FormControl>\r\n            <List>\r\n                {tags.map((value) => {\r\n                    const labelId = `checkbox-list-label-${value}`;\r\n\r\n                    return (\r\n                        <ListItem\r\n                            key={value}\r\n                            role={undefined}\r\n                            dense\r\n                            button\r\n                            onClick={handleToggle(value)}\r\n                        >\r\n                            <ListItemIcon>\r\n                                <Checkbox\r\n                                    color=\"primary\"\r\n                                    edge=\"start\"\r\n                                    checked={checked.indexOf(value) !== -1}\r\n                                    tabIndex={-1}\r\n                                    disableRipple\r\n                                    inputProps={{\r\n                                        \"aria-labelledby\": labelId,\r\n                                    }}\r\n                                />\r\n                            </ListItemIcon>\r\n                            <ListItemText id={labelId} primary={value} />\r\n                        </ListItem>\r\n                    );\r\n                })}\r\n            </List>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default FormTags;\r\n","D:\\ReactApps\\notes-app\\src\\components\\FormTag\\style.js",[],"D:\\ReactApps\\notes-app\\src\\components\\Footer\\Footer.js",["120"],"import React, { useState } from \"react\";\r\nimport useStyles from \"./style\";\r\n//Material UI elements\r\nimport {\r\n    CardActionArea,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n} from \"@material-ui/core\";\r\n\r\n//Material UI icons\r\nimport {\r\n    NotificationsNone,\r\n    PaletteOutlined,\r\n    MoveToInboxOutlined,\r\n    LabelOutlined,\r\n    MoreVertOutlined,\r\n} from \"@material-ui/icons\";\r\n\r\nconst Footer = ({ footerID, menuIcon }) => {\r\n    const classes = useStyles();\r\n\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    //Footer icons\r\n    const createNoteIcons = [\r\n        { name: \"alert\", icon: <NotificationsNone /> },\r\n        { name: \"color\", icon: <PaletteOutlined /> },\r\n        { name: \"archive\", icon: <MoveToInboxOutlined /> },\r\n        { name: \"tag\", icon: <LabelOutlined /> },\r\n        { name: \"menu\", icon: <MoreVertOutlined /> },\r\n    ];\r\n    //Conditionally displays menu icon\r\n    if (menuIcon === false) {\r\n        const length = createNoteIcons.length;\r\n        delete createNoteIcons[length - 1];\r\n    }\r\n\r\n    //Opens forms (Reminder, color, tags)\r\n    const toggleOpen = () => {\r\n        setIsOpen((isOpen) => !isOpen);\r\n    };\r\n\r\n    const buttonCoordinates = (e) => {\r\n        let btnHeight = e.currentTarget.clientHeight;\r\n        let btnWidth = e.currentTarget.clientWidth;\r\n        let topDistance = e.clientY;\r\n        let leftDistance = e.clientX;\r\n\r\n        let absoluteTop = topDistance + btnHeight;\r\n        let absoluteLeft = leftDistance + btnWidth;\r\n\r\n        // console.log(btnHeight, btnWidth);\r\n        // console.log(topDistance, leftDistance);\r\n        // console.log(absoluteTop, absoluteLeft);\r\n        return { top: absoluteTop, left: absoluteLeft };\r\n    };\r\n\r\n    return (\r\n        <div id={footerID} className={classes.footer}>\r\n            <CardActionArea disableRipple={true}>\r\n                <List className={classes.createNoteIcons}>\r\n                    {createNoteIcons.map((icon, index) => (\r\n                        <ListItem\r\n                            button={true}\r\n                            disableRipple={true}\r\n                            className={classes.iconItem}\r\n                            key={index}\r\n                            // id={`${icon.name}${index}`}\r\n                            name={icon.name}\r\n                            onClick={toggleOpen}\r\n                            onMouseDown={buttonCoordinates}\r\n                        >\r\n                            <ListItemIcon className={classes.icon}>\r\n                                {icon.icon}\r\n                            </ListItemIcon>\r\n                        </ListItem>\r\n                    ))}\r\n                </List>\r\n            </CardActionArea>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","D:\\ReactApps\\notes-app\\src\\components\\Footer\\style.js",[],"D:\\ReactApps\\notes-app\\src\\hooks\\useClickOutside.js",[],{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":1,"column":17,"nodeType":"127","messageId":"128","endLine":1,"endColumn":25},{"ruleId":"125","severity":1,"message":"129","line":1,"column":27,"nodeType":"127","messageId":"128","endLine":1,"endColumn":36},{"ruleId":"125","severity":1,"message":"130","line":5,"column":39,"nodeType":"127","messageId":"128","endLine":5,"endColumn":43},{"ruleId":"125","severity":1,"message":"131","line":6,"column":8,"nodeType":"127","messageId":"128","endLine":6,"endColumn":39},{"ruleId":"125","severity":1,"message":"132","line":7,"column":8,"nodeType":"127","messageId":"128","endLine":7,"endColumn":24},{"ruleId":"125","severity":1,"message":"133","line":10,"column":8,"nodeType":"127","messageId":"128","endLine":10,"endColumn":15},{"ruleId":"125","severity":1,"message":"134","line":11,"column":8,"nodeType":"127","messageId":"128","endLine":11,"endColumn":17},{"ruleId":"125","severity":1,"message":"135","line":12,"column":8,"nodeType":"127","messageId":"128","endLine":12,"endColumn":20},{"ruleId":"125","severity":1,"message":"136","line":14,"column":20,"nodeType":"127","messageId":"128","endLine":14,"endColumn":29},{"ruleId":"125","severity":1,"message":"136","line":16,"column":20,"nodeType":"127","messageId":"128","endLine":16,"endColumn":29},{"ruleId":"125","severity":1,"message":"136","line":29,"column":20,"nodeType":"127","messageId":"128","endLine":29,"endColumn":29},{"ruleId":"125","severity":1,"message":"137","line":23,"column":12,"nodeType":"127","messageId":"128","endLine":23,"endColumn":18},"no-native-reassign",["138"],"no-negated-in-lhs",["139"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Chip' is defined but never used.","'NotificationsActiveOutlinedIcon' is defined but never used.","'HighlightOffIcon' is defined but never used.","'FormTag' is defined but never used.","'FormColor' is defined but never used.","'FormReminder' is defined but never used.","'setIsOpen' is assigned a value but never used.","'isOpen' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]