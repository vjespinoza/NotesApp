[{"D:\\ReactApps\\notes-app\\src\\index.js":"1","D:\\ReactApps\\notes-app\\src\\App.js":"2","D:\\ReactApps\\notes-app\\src\\appStyles.js":"3","D:\\ReactApps\\notes-app\\src\\components\\NavBar\\NavBar.js":"4","D:\\ReactApps\\notes-app\\src\\components\\NavBar\\style.js":"5","D:\\ReactApps\\notes-app\\src\\theme\\theme.js":"6","D:\\ReactApps\\notes-app\\src\\components\\SideBar\\Sidebar.js":"7","D:\\ReactApps\\notes-app\\src\\components\\SideBar\\style.js":"8","D:\\ReactApps\\notes-app\\src\\components\\Dashboard\\Dashboard.js":"9","D:\\ReactApps\\notes-app\\src\\components\\Dashboard\\style.js":"10","D:\\ReactApps\\notes-app\\src\\components\\Note\\Note.js":"11","D:\\ReactApps\\notes-app\\src\\components\\Note\\style.js":"12","D:\\ReactApps\\notes-app\\src\\components\\CreateNote\\CreateNote.js":"13","D:\\ReactApps\\notes-app\\src\\components\\CreateNote\\style.js":"14","D:\\ReactApps\\notes-app\\src\\components\\NotesList\\NotesList.js":"15","D:\\ReactApps\\notes-app\\src\\components\\NotesList\\style.js":"16","D:\\ReactApps\\notes-app\\src\\components\\FormReminder\\FormReminder.js":"17","D:\\ReactApps\\notes-app\\src\\components\\FormReminder\\style.js":"18","D:\\ReactApps\\notes-app\\src\\components\\FormColorPick\\FormColor.js":"19","D:\\ReactApps\\notes-app\\src\\components\\FormColorPick\\style.js":"20","D:\\ReactApps\\notes-app\\src\\components\\FormTag\\FormTag.js":"21","D:\\ReactApps\\notes-app\\src\\components\\FormTag\\style.js":"22","D:\\ReactApps\\notes-app\\src\\components\\Footer\\Footer.js":"23","D:\\ReactApps\\notes-app\\src\\components\\Footer\\style.js":"24","D:\\ReactApps\\notes-app\\src\\hooks\\useClickOutside.js":"25","D:\\ReactApps\\notes-app\\src\\hooks\\useCreateNote.js":"26","D:\\ReactApps\\notes-app\\src\\hooks\\useCreateID.js":"27","D:\\ReactApps\\notes-app\\src\\hooks\\useFormView.js":"28"},{"size":410,"mtime":1618606853535,"results":"29","hashOfConfig":"30"},{"size":692,"mtime":1618607850982,"results":"31","hashOfConfig":"30"},{"size":255,"mtime":1612308088173,"results":"32","hashOfConfig":"30"},{"size":1823,"mtime":1615219838380,"results":"33","hashOfConfig":"30"},{"size":915,"mtime":1613149570188,"results":"34","hashOfConfig":"30"},{"size":646,"mtime":1612555995313,"results":"35","hashOfConfig":"30"},{"size":2079,"mtime":1615219822300,"results":"36","hashOfConfig":"30"},{"size":381,"mtime":1613149627327,"results":"37","hashOfConfig":"30"},{"size":615,"mtime":1618608594466,"results":"38","hashOfConfig":"30"},{"size":612,"mtime":1614119628479,"results":"39","hashOfConfig":"30"},{"size":2274,"mtime":1618931049983,"results":"40","hashOfConfig":"30"},{"size":1161,"mtime":1616021577196,"results":"41","hashOfConfig":"30"},{"size":2510,"mtime":1618931630845,"results":"42","hashOfConfig":"30"},{"size":1621,"mtime":1618931519132,"results":"43","hashOfConfig":"30"},{"size":891,"mtime":1618607669563,"results":"44","hashOfConfig":"30"},{"size":312,"mtime":1616021138746,"results":"45","hashOfConfig":"30"},{"size":2006,"mtime":1618958103674,"results":"46","hashOfConfig":"30"},{"size":697,"mtime":1618958103676,"results":"47","hashOfConfig":"30"},{"size":2372,"mtime":1618412098651,"results":"48","hashOfConfig":"30"},{"size":878,"mtime":1618958241307,"results":"49","hashOfConfig":"30"},{"size":2613,"mtime":1618412098605,"results":"50","hashOfConfig":"30"},{"size":698,"mtime":1618958241307,"results":"51","hashOfConfig":"30"},{"size":1444,"mtime":1618958697237,"results":"52","hashOfConfig":"30"},{"size":639,"mtime":1618932517080,"results":"53","hashOfConfig":"30"},{"size":441,"mtime":1615999147376,"results":"54","hashOfConfig":"30"},{"size":757,"mtime":1618608651972,"results":"55","hashOfConfig":"30"},{"size":823,"mtime":1618443862027,"results":"56","hashOfConfig":"30"},{"size":1876,"mtime":1618959816072,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"1q63b0x",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"60"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"60"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"60"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\ReactApps\\notes-app\\src\\index.js",[],["119","120"],"D:\\ReactApps\\notes-app\\src\\App.js",[],"D:\\ReactApps\\notes-app\\src\\appStyles.js",[],"D:\\ReactApps\\notes-app\\src\\components\\NavBar\\NavBar.js",[],"D:\\ReactApps\\notes-app\\src\\components\\NavBar\\style.js",[],"D:\\ReactApps\\notes-app\\src\\theme\\theme.js",[],"D:\\ReactApps\\notes-app\\src\\components\\SideBar\\Sidebar.js",[],"D:\\ReactApps\\notes-app\\src\\components\\SideBar\\style.js",[],"D:\\ReactApps\\notes-app\\src\\components\\Dashboard\\Dashboard.js",[],"D:\\ReactApps\\notes-app\\src\\components\\Dashboard\\style.js",[],"D:\\ReactApps\\notes-app\\src\\components\\Note\\Note.js",["121","122","123"],"import React from \"react\";\r\n//Imported styles\r\nimport useStyles from \"./style\";\r\n//Imported components from Material UI\r\nimport { Card, Typography, Container, Chip } from \"@material-ui/core\";\r\nimport NotificationsActiveOutlinedIcon from \"@material-ui/icons/NotificationsActiveOutlined\";\r\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\r\n//Components\r\nimport Footer from \"../Footer/Footer\";\r\n\r\nconst Note = ({ title, body }) => {\r\n    const classes = useStyles();\r\n\r\n    // console.log(note.color);\r\n\r\n    const alertBadge = (\r\n        <Chip\r\n        // id={`badge${id}`}\r\n        // className={classes.alertBadge}\r\n        // icon={<NotificationsActiveOutlinedIcon />}\r\n        // size=\"small\"\r\n        // onDelete={handleBadgeDelete}\r\n        // label={`${activeAlert.date}, ${activeAlert.time}`}\r\n        // deleteIcon={<HighlightOffIcon id={`badgeClose${id}`} />}\r\n        ></Chip>\r\n    );\r\n\r\n    return (\r\n        <Card variant=\"outlined\" className={classes.note}>\r\n            <Container>\r\n                <Typography\r\n                    className={classes.noteTitle}\r\n                    align=\"left\"\r\n                    variant=\"h6\"\r\n                >\r\n                    {title}\r\n                </Typography>\r\n            </Container>\r\n            <Container>\r\n                <Typography className={classes.noteContent} align=\"left\">\r\n                    {body}\r\n                </Typography>\r\n            </Container>\r\n            {/* <Container>{active === true ? alertBadge : \"\"}</Container>\r\n            <Container>\r\n                {tags.map((tag, index) => (\r\n                    <Chip\r\n                        id={`tag${index}`}\r\n                        key={index}\r\n                        className={classes.alertBadge}\r\n                        size=\"small\"\r\n                        onDelete={handleTagDelete}\r\n                        label={`${tag}`}\r\n                        deleteIcon={\r\n                            <HighlightOffIcon id={`tagClose${index}`} />\r\n                        }\r\n                    ></Chip>\r\n                ))}\r\n            </Container> */}\r\n            <Container className={classes.noteFooter}>\r\n                <Footer />\r\n            </Container>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Note;\r\n","D:\\ReactApps\\notes-app\\src\\components\\Note\\style.js",[],"D:\\ReactApps\\notes-app\\src\\components\\CreateNote\\CreateNote.js",[],"D:\\ReactApps\\notes-app\\src\\components\\CreateNote\\style.js",[],"D:\\ReactApps\\notes-app\\src\\components\\NotesList\\NotesList.js",[],"D:\\ReactApps\\notes-app\\src\\components\\NotesList\\style.js",[],"D:\\ReactApps\\notes-app\\src\\components\\FormReminder\\FormReminder.js",[],"D:\\ReactApps\\notes-app\\src\\components\\FormReminder\\style.js",[],"D:\\ReactApps\\notes-app\\src\\components\\FormColorPick\\FormColor.js",["124"],"import React, { useState, useRef } from \"react\";\r\nimport useStyles from \"./style\";\r\nimport {\r\n    FormControl,\r\n    RadioGroup,\r\n    Radio,\r\n    FormControlLabel,\r\n    Card,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport DoneOutlinedIcon from \"@material-ui/icons/DoneOutlined\";\r\n\r\nconst FormColor = ({ noteBgColor, setNoteBgColor, footerID, uniqueID }) => {\r\n    const classes = useStyles();\r\n\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const colorPalette = [\r\n        \"#ffffff\",\r\n        \"#f28b82\",\r\n        \"#fbbc04\",\r\n        \"#fff475\",\r\n        \"#ccff90\",\r\n        \"#a7ffeb\",\r\n        \"#4cc9f0\",\r\n        \"#aecbfa\",\r\n        \"#d7aefb\",\r\n        \"#fdcfe8\",\r\n        \"#e6c9a8\",\r\n        \"#d1c7c9\",\r\n    ];\r\n\r\n    const domRef = useRef(null);\r\n\r\n    const handleColorChange = (e) => {\r\n        setNoteBgColor(e.target.value);\r\n    };\r\n\r\n    return (\r\n        <Card\r\n            ref={domRef}\r\n            id={uniqueID === false ? `formColor_${footerID}` : \"formColor\"}\r\n            className={classes.colorForm}\r\n            style={{\r\n                opacity: isOpen === true ? 1 : 0,\r\n                visibility: isOpen === true ? \"visible\" : \"hidden\",\r\n            }}\r\n        >\r\n            <Typography className={classes.formTitle} variant=\"h3\">\r\n                Colors:\r\n            </Typography>\r\n            <FormControl>\r\n                <RadioGroup\r\n                    className={classes.colorList}\r\n                    value={noteBgColor}\r\n                    name=\"colorPick\"\r\n                >\r\n                    {colorPalette.map((color, index) => {\r\n                        return (\r\n                            <FormControlLabel\r\n                                key={index}\r\n                                value={color}\r\n                                onChange={handleColorChange}\r\n                                className={classes.input}\r\n                                style={{ background: color }}\r\n                                control={\r\n                                    <Radio\r\n                                        id={`color${index + 1}`}\r\n                                        icon=\"\"\r\n                                        disableRipple={true}\r\n                                        checkedIcon={\r\n                                            <DoneOutlinedIcon\r\n                                                style={{\r\n                                                    fontSize: \"2rem\",\r\n                                                    color: \"#6c757d\",\r\n                                                }}\r\n                                            />\r\n                                        }\r\n                                    />\r\n                                }\r\n                            ></FormControlLabel>\r\n                        );\r\n                    })}\r\n                </RadioGroup>\r\n            </FormControl>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default FormColor;\r\n","D:\\ReactApps\\notes-app\\src\\components\\FormColorPick\\style.js",[],"D:\\ReactApps\\notes-app\\src\\components\\FormTag\\FormTag.js",["125"],"import React, { useState, useRef } from \"react\";\r\nimport useStyles from \"./style\";\r\nimport {\r\n    FormControl,\r\n    Input,\r\n    Card,\r\n    Typography,\r\n    InputAdornment,\r\n    IconButton,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    Checkbox,\r\n    ListItemText,\r\n} from \"@material-ui/core\";\r\nimport AddOutlinedIcon from \"@material-ui/icons/AddOutlined\";\r\n\r\nconst FormTags = ({\r\n    footerID,\r\n    uniqueID,\r\n    tag,\r\n    setTag,\r\n    checked,\r\n    setChecked,\r\n    setNoteTag,\r\n}) => {\r\n    const classes = useStyles();\r\n\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const [query, setQuery] = useState(\"\");\r\n\r\n    const domRef = useRef(null);\r\n\r\n    const tags = tag;\r\n\r\n    const getNewTag = (e) => {\r\n        setQuery(e.target.value);\r\n    };\r\n\r\n    const submitTag = () => {\r\n        setTag(tag.concat(query));\r\n        setQuery(\"\");\r\n        document.getElementById(\"inputTag\").value = \"\";\r\n    };\r\n\r\n    const handleToggle = (value) => () => {\r\n        const currentIndex = checked.indexOf(value);\r\n        const newChecked = [...checked];\r\n\r\n        if (currentIndex === -1) {\r\n            newChecked.push(value);\r\n        } else {\r\n            newChecked.splice(currentIndex, 1);\r\n        }\r\n\r\n        setChecked(newChecked);\r\n        setNoteTag(newChecked);\r\n    };\r\n\r\n    return (\r\n        <Card\r\n            ref={domRef}\r\n            id={uniqueID === false ? `formTag_${footerID}` : \"formTag\"}\r\n            style={{\r\n                opacity: isOpen === true ? 1 : 0,\r\n                visibility: isOpen === true ? \"visible\" : \"hidden\",\r\n            }}\r\n            className={classes.formTag}\r\n        >\r\n            <Typography className={classes.formTitle} variant=\"h3\">\r\n                Tag note:\r\n            </Typography>\r\n            <FormControl>\r\n                <Input\r\n                    id={\r\n                        uniqueID === false ? `inputTag_${footerID}` : \"inputTag\"\r\n                    }\r\n                    className={classes.formInput}\r\n                    type=\"text\"\r\n                    onChange={getNewTag}\r\n                    placeholder=\"Type tag's name\"\r\n                    endAdornment={\r\n                        <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                                onClick={submitTag}\r\n                                aria-label=\"toggle password visibility\"\r\n                                edge=\"end\"\r\n                            >\r\n                                <AddOutlinedIcon />\r\n                            </IconButton>\r\n                        </InputAdornment>\r\n                    }\r\n                />\r\n            </FormControl>\r\n            <List>\r\n                {tags.map((value) => {\r\n                    const labelId = `checkbox-list-label-${value}`;\r\n\r\n                    return (\r\n                        <ListItem\r\n                            key={value}\r\n                            role={undefined}\r\n                            dense\r\n                            button\r\n                            onClick={handleToggle(value)}\r\n                        >\r\n                            <ListItemIcon>\r\n                                <Checkbox\r\n                                    color=\"primary\"\r\n                                    edge=\"start\"\r\n                                    checked={checked.indexOf(value) !== -1}\r\n                                    tabIndex={-1}\r\n                                    disableRipple\r\n                                    inputProps={{\r\n                                        \"aria-labelledby\": labelId,\r\n                                    }}\r\n                                />\r\n                            </ListItemIcon>\r\n                            <ListItemText id={labelId} primary={value} />\r\n                        </ListItem>\r\n                    );\r\n                })}\r\n            </List>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default FormTags;\r\n","D:\\ReactApps\\notes-app\\src\\components\\FormTag\\style.js",[],"D:\\ReactApps\\notes-app\\src\\components\\Footer\\Footer.js",["126"],"D:\\ReactApps\\notes-app\\src\\components\\Footer\\style.js",[],"D:\\ReactApps\\notes-app\\src\\hooks\\useClickOutside.js",[],"D:\\ReactApps\\notes-app\\src\\hooks\\useCreateNote.js",[],"D:\\ReactApps\\notes-app\\src\\hooks\\useCreateID.js",["127"],"import { useState, useEffect } from \"react\";\r\n\r\n//Takes notes (from App component state) as param in order to use as dependency.\r\nconst useCreateID = (param) => {\r\n    const [counter, setCounter] = useState(1);\r\n    const [newID, setNewID] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        //Random id (ID Prefix)\r\n        const prefix = Math.random().toString(36).slice(-10);\r\n\r\n        //Counter (ID sufix)\r\n        const zeroBase = \"0000\";\r\n\r\n        setCounter((counter) => counter + 1);\r\n\r\n        const intSize = counter.toString().length;\r\n\r\n        const sliceBase = zeroBase.slice(0, zeroBase.length - intSize);\r\n\r\n        const sufix = sliceBase + counter;\r\n\r\n        const noteID = prefix + \"_\" + sufix;\r\n\r\n        setNewID(noteID);\r\n    }, [param]);\r\n\r\n    return { newID };\r\n};\r\n\r\nexport default useCreateID;\r\n","D:\\ReactApps\\notes-app\\src\\hooks\\useFormView.js",["128"],{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"134","line":6,"column":8,"nodeType":"135","messageId":"136","endLine":6,"endColumn":39},{"ruleId":"133","severity":1,"message":"137","line":7,"column":8,"nodeType":"135","messageId":"136","endLine":7,"endColumn":24},{"ruleId":"133","severity":1,"message":"138","line":16,"column":11,"nodeType":"135","messageId":"136","endLine":16,"endColumn":21},{"ruleId":"133","severity":1,"message":"139","line":16,"column":20,"nodeType":"135","messageId":"136","endLine":16,"endColumn":29},{"ruleId":"133","severity":1,"message":"139","line":29,"column":20,"nodeType":"135","messageId":"136","endLine":29,"endColumn":29},{"ruleId":"133","severity":1,"message":"140","line":1,"column":10,"nodeType":"135","messageId":"136","endLine":1,"endColumn":18},{"ruleId":"141","severity":1,"message":"142","line":26,"column":8,"nodeType":"143","endLine":26,"endColumn":15,"suggestions":"144"},{"ruleId":"133","severity":1,"message":"145","line":14,"column":8,"nodeType":"135","messageId":"136","endLine":14,"endColumn":16},"no-native-reassign",["146"],"no-negated-in-lhs",["147"],"no-unused-vars","'NotificationsActiveOutlinedIcon' is defined but never used.","Identifier","unusedVar","'HighlightOffIcon' is defined but never used.","'alertBadge' is assigned a value but never used.","'setIsOpen' is assigned a value but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'counter'. Either include it or remove the dependency array.","ArrayExpression",["148"],"'FormTags' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"149","fix":"150"},"Update the dependencies array to be: [counter, param]",{"range":"151","text":"152"},[752,759],"[counter, param]"]