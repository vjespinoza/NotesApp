[{"D:\\ReactApps\\notes-app\\src\\index.js":"1","D:\\ReactApps\\notes-app\\src\\App.js":"2","D:\\ReactApps\\notes-app\\src\\appStyles.js":"3","D:\\ReactApps\\notes-app\\src\\components\\NavBar\\NavBar.js":"4","D:\\ReactApps\\notes-app\\src\\components\\NavBar\\style.js":"5","D:\\ReactApps\\notes-app\\src\\theme\\theme.js":"6","D:\\ReactApps\\notes-app\\src\\components\\SideBar\\Sidebar.js":"7","D:\\ReactApps\\notes-app\\src\\components\\SideBar\\style.js":"8","D:\\ReactApps\\notes-app\\src\\components\\Dashboard\\Dashboard.js":"9","D:\\ReactApps\\notes-app\\src\\components\\Dashboard\\style.js":"10","D:\\ReactApps\\notes-app\\src\\components\\Note\\Note.js":"11","D:\\ReactApps\\notes-app\\src\\components\\Note\\style.js":"12","D:\\ReactApps\\notes-app\\src\\components\\CreateNote\\CreateNote.js":"13","D:\\ReactApps\\notes-app\\src\\components\\CreateNote\\style.js":"14","D:\\ReactApps\\notes-app\\src\\components\\NotesList\\NotesList.js":"15","D:\\ReactApps\\notes-app\\src\\components\\NotesList\\style.js":"16","D:\\ReactApps\\notes-app\\src\\components\\FormReminder\\FormReminder.js":"17","D:\\ReactApps\\notes-app\\src\\components\\FormReminder\\style.js":"18","D:\\ReactApps\\notes-app\\src\\components\\FormColorPick\\FormColor.js":"19","D:\\ReactApps\\notes-app\\src\\components\\FormColorPick\\style.js":"20","D:\\ReactApps\\notes-app\\src\\components\\FormTag\\FormTag.js":"21","D:\\ReactApps\\notes-app\\src\\components\\FormTag\\style.js":"22","D:\\ReactApps\\notes-app\\src\\components\\Footer\\Footer.js":"23","D:\\ReactApps\\notes-app\\src\\components\\Footer\\style.js":"24","D:\\ReactApps\\notes-app\\src\\hooks\\useClickOutside.js":"25","D:\\ReactApps\\notes-app\\src\\hooks\\useCreateNote.js":"26","D:\\ReactApps\\notes-app\\src\\hooks\\useCreateID.js":"27"},{"size":410,"mtime":1618606853535,"results":"28","hashOfConfig":"29"},{"size":692,"mtime":1618607850982,"results":"30","hashOfConfig":"29"},{"size":255,"mtime":1612308088173,"results":"31","hashOfConfig":"29"},{"size":1823,"mtime":1615219838380,"results":"32","hashOfConfig":"29"},{"size":915,"mtime":1613149570188,"results":"33","hashOfConfig":"29"},{"size":646,"mtime":1612555995313,"results":"34","hashOfConfig":"29"},{"size":2079,"mtime":1615219822300,"results":"35","hashOfConfig":"29"},{"size":381,"mtime":1613149627327,"results":"36","hashOfConfig":"29"},{"size":615,"mtime":1618608594466,"results":"37","hashOfConfig":"29"},{"size":612,"mtime":1614119628479,"results":"38","hashOfConfig":"29"},{"size":2274,"mtime":1618931049983,"results":"39","hashOfConfig":"29"},{"size":1161,"mtime":1616021577196,"results":"40","hashOfConfig":"29"},{"size":2510,"mtime":1618931630845,"results":"41","hashOfConfig":"29"},{"size":1621,"mtime":1618931519132,"results":"42","hashOfConfig":"29"},{"size":891,"mtime":1618607669563,"results":"43","hashOfConfig":"29"},{"size":312,"mtime":1616021138746,"results":"44","hashOfConfig":"29"},{"size":2006,"mtime":1618610189707,"results":"45","hashOfConfig":"29"},{"size":697,"mtime":1618931708456,"results":"46","hashOfConfig":"29"},{"size":2372,"mtime":1618412098651,"results":"47","hashOfConfig":"29"},{"size":858,"mtime":1616011646937,"results":"48","hashOfConfig":"29"},{"size":2613,"mtime":1618412098605,"results":"49","hashOfConfig":"29"},{"size":667,"mtime":1615998907238,"results":"50","hashOfConfig":"29"},{"size":2786,"mtime":1618934532995,"results":"51","hashOfConfig":"29"},{"size":639,"mtime":1618932517080,"results":"52","hashOfConfig":"29"},{"size":441,"mtime":1615999147376,"results":"53","hashOfConfig":"29"},{"size":757,"mtime":1618608651972,"results":"54","hashOfConfig":"29"},{"size":823,"mtime":1618443862027,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"1q63b0x",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"58"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"58"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"58"},"D:\\ReactApps\\notes-app\\src\\index.js",[],["114","115"],"D:\\ReactApps\\notes-app\\src\\App.js",[],"D:\\ReactApps\\notes-app\\src\\appStyles.js",[],"D:\\ReactApps\\notes-app\\src\\components\\NavBar\\NavBar.js",[],"D:\\ReactApps\\notes-app\\src\\components\\NavBar\\style.js",[],"D:\\ReactApps\\notes-app\\src\\theme\\theme.js",[],"D:\\ReactApps\\notes-app\\src\\components\\SideBar\\Sidebar.js",[],"D:\\ReactApps\\notes-app\\src\\components\\SideBar\\style.js",[],"D:\\ReactApps\\notes-app\\src\\components\\Dashboard\\Dashboard.js",[],"D:\\ReactApps\\notes-app\\src\\components\\Dashboard\\style.js",[],"D:\\ReactApps\\notes-app\\src\\components\\Note\\Note.js",["116","117","118"],"D:\\ReactApps\\notes-app\\src\\components\\Note\\style.js",[],"D:\\ReactApps\\notes-app\\src\\components\\CreateNote\\CreateNote.js",[],"D:\\ReactApps\\notes-app\\src\\components\\CreateNote\\style.js",[],"D:\\ReactApps\\notes-app\\src\\components\\NotesList\\NotesList.js",[],"D:\\ReactApps\\notes-app\\src\\components\\NotesList\\style.js",[],"D:\\ReactApps\\notes-app\\src\\components\\FormReminder\\FormReminder.js",[],"D:\\ReactApps\\notes-app\\src\\components\\FormReminder\\style.js",[],"D:\\ReactApps\\notes-app\\src\\components\\FormColorPick\\FormColor.js",["119"],"import React, { useState, useRef } from \"react\";\r\nimport useStyles from \"./style\";\r\nimport {\r\n    FormControl,\r\n    RadioGroup,\r\n    Radio,\r\n    FormControlLabel,\r\n    Card,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport DoneOutlinedIcon from \"@material-ui/icons/DoneOutlined\";\r\n\r\nconst FormColor = ({ noteBgColor, setNoteBgColor, footerID, uniqueID }) => {\r\n    const classes = useStyles();\r\n\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const colorPalette = [\r\n        \"#ffffff\",\r\n        \"#f28b82\",\r\n        \"#fbbc04\",\r\n        \"#fff475\",\r\n        \"#ccff90\",\r\n        \"#a7ffeb\",\r\n        \"#4cc9f0\",\r\n        \"#aecbfa\",\r\n        \"#d7aefb\",\r\n        \"#fdcfe8\",\r\n        \"#e6c9a8\",\r\n        \"#d1c7c9\",\r\n    ];\r\n\r\n    const domRef = useRef(null);\r\n\r\n    const handleColorChange = (e) => {\r\n        setNoteBgColor(e.target.value);\r\n    };\r\n\r\n    return (\r\n        <Card\r\n            ref={domRef}\r\n            id={uniqueID === false ? `formColor_${footerID}` : \"formColor\"}\r\n            className={classes.colorForm}\r\n            style={{\r\n                opacity: isOpen === true ? 1 : 0,\r\n                visibility: isOpen === true ? \"visible\" : \"hidden\",\r\n            }}\r\n        >\r\n            <Typography className={classes.formTitle} variant=\"h3\">\r\n                Colors:\r\n            </Typography>\r\n            <FormControl>\r\n                <RadioGroup\r\n                    className={classes.colorList}\r\n                    value={noteBgColor}\r\n                    name=\"colorPick\"\r\n                >\r\n                    {colorPalette.map((color, index) => {\r\n                        return (\r\n                            <FormControlLabel\r\n                                key={index}\r\n                                value={color}\r\n                                onChange={handleColorChange}\r\n                                className={classes.input}\r\n                                style={{ background: color }}\r\n                                control={\r\n                                    <Radio\r\n                                        id={`color${index + 1}`}\r\n                                        icon=\"\"\r\n                                        disableRipple={true}\r\n                                        checkedIcon={\r\n                                            <DoneOutlinedIcon\r\n                                                style={{\r\n                                                    fontSize: \"2rem\",\r\n                                                    color: \"#6c757d\",\r\n                                                }}\r\n                                            />\r\n                                        }\r\n                                    />\r\n                                }\r\n                            ></FormControlLabel>\r\n                        );\r\n                    })}\r\n                </RadioGroup>\r\n            </FormControl>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default FormColor;\r\n","D:\\ReactApps\\notes-app\\src\\components\\FormColorPick\\style.js",[],"D:\\ReactApps\\notes-app\\src\\components\\FormTag\\FormTag.js",["120"],"import React, { useState, useRef } from \"react\";\r\nimport useStyles from \"./style\";\r\nimport {\r\n    FormControl,\r\n    Input,\r\n    Card,\r\n    Typography,\r\n    InputAdornment,\r\n    IconButton,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    Checkbox,\r\n    ListItemText,\r\n} from \"@material-ui/core\";\r\nimport AddOutlinedIcon from \"@material-ui/icons/AddOutlined\";\r\n\r\nconst FormTags = ({\r\n    footerID,\r\n    uniqueID,\r\n    tag,\r\n    setTag,\r\n    checked,\r\n    setChecked,\r\n    setNoteTag,\r\n}) => {\r\n    const classes = useStyles();\r\n\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const [query, setQuery] = useState(\"\");\r\n\r\n    const domRef = useRef(null);\r\n\r\n    const tags = tag;\r\n\r\n    const getNewTag = (e) => {\r\n        setQuery(e.target.value);\r\n    };\r\n\r\n    const submitTag = () => {\r\n        setTag(tag.concat(query));\r\n        setQuery(\"\");\r\n        document.getElementById(\"inputTag\").value = \"\";\r\n    };\r\n\r\n    const handleToggle = (value) => () => {\r\n        const currentIndex = checked.indexOf(value);\r\n        const newChecked = [...checked];\r\n\r\n        if (currentIndex === -1) {\r\n            newChecked.push(value);\r\n        } else {\r\n            newChecked.splice(currentIndex, 1);\r\n        }\r\n\r\n        setChecked(newChecked);\r\n        setNoteTag(newChecked);\r\n    };\r\n\r\n    return (\r\n        <Card\r\n            ref={domRef}\r\n            id={uniqueID === false ? `formTag_${footerID}` : \"formTag\"}\r\n            style={{\r\n                opacity: isOpen === true ? 1 : 0,\r\n                visibility: isOpen === true ? \"visible\" : \"hidden\",\r\n            }}\r\n            className={classes.formTag}\r\n        >\r\n            <Typography className={classes.formTitle} variant=\"h3\">\r\n                Tag note:\r\n            </Typography>\r\n            <FormControl>\r\n                <Input\r\n                    id={\r\n                        uniqueID === false ? `inputTag_${footerID}` : \"inputTag\"\r\n                    }\r\n                    className={classes.formInput}\r\n                    type=\"text\"\r\n                    onChange={getNewTag}\r\n                    placeholder=\"Type tag's name\"\r\n                    endAdornment={\r\n                        <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                                onClick={submitTag}\r\n                                aria-label=\"toggle password visibility\"\r\n                                edge=\"end\"\r\n                            >\r\n                                <AddOutlinedIcon />\r\n                            </IconButton>\r\n                        </InputAdornment>\r\n                    }\r\n                />\r\n            </FormControl>\r\n            <List>\r\n                {tags.map((value) => {\r\n                    const labelId = `checkbox-list-label-${value}`;\r\n\r\n                    return (\r\n                        <ListItem\r\n                            key={value}\r\n                            role={undefined}\r\n                            dense\r\n                            button\r\n                            onClick={handleToggle(value)}\r\n                        >\r\n                            <ListItemIcon>\r\n                                <Checkbox\r\n                                    color=\"primary\"\r\n                                    edge=\"start\"\r\n                                    checked={checked.indexOf(value) !== -1}\r\n                                    tabIndex={-1}\r\n                                    disableRipple\r\n                                    inputProps={{\r\n                                        \"aria-labelledby\": labelId,\r\n                                    }}\r\n                                />\r\n                            </ListItemIcon>\r\n                            <ListItemText id={labelId} primary={value} />\r\n                        </ListItem>\r\n                    );\r\n                })}\r\n            </List>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default FormTags;\r\n","D:\\ReactApps\\notes-app\\src\\components\\FormTag\\style.js",[],"D:\\ReactApps\\notes-app\\src\\components\\Footer\\Footer.js",[],"D:\\ReactApps\\notes-app\\src\\components\\Footer\\style.js",[],"D:\\ReactApps\\notes-app\\src\\hooks\\useClickOutside.js",[],"D:\\ReactApps\\notes-app\\src\\hooks\\useCreateNote.js",[],"D:\\ReactApps\\notes-app\\src\\hooks\\useCreateID.js",["121"],"import { useState, useEffect } from \"react\";\r\n\r\n//Takes notes (from App component state) as param in order to use as dependency.\r\nconst useCreateID = (param) => {\r\n    const [counter, setCounter] = useState(1);\r\n    const [newID, setNewID] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        //Random id (ID Prefix)\r\n        const prefix = Math.random().toString(36).slice(-10);\r\n\r\n        //Counter (ID sufix)\r\n        const zeroBase = \"0000\";\r\n\r\n        setCounter((counter) => counter + 1);\r\n\r\n        const intSize = counter.toString().length;\r\n\r\n        const sliceBase = zeroBase.slice(0, zeroBase.length - intSize);\r\n\r\n        const sufix = sliceBase + counter;\r\n\r\n        const noteID = prefix + \"_\" + sufix;\r\n\r\n        setNewID(noteID);\r\n    }, [param]);\r\n\r\n    return { newID };\r\n};\r\n\r\nexport default useCreateID;\r\n",{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":6,"column":8,"nodeType":"128","messageId":"129","endLine":6,"endColumn":39},{"ruleId":"126","severity":1,"message":"130","line":7,"column":8,"nodeType":"128","messageId":"129","endLine":7,"endColumn":24},{"ruleId":"126","severity":1,"message":"131","line":16,"column":11,"nodeType":"128","messageId":"129","endLine":16,"endColumn":21},{"ruleId":"126","severity":1,"message":"132","line":16,"column":20,"nodeType":"128","messageId":"129","endLine":16,"endColumn":29},{"ruleId":"126","severity":1,"message":"132","line":29,"column":20,"nodeType":"128","messageId":"129","endLine":29,"endColumn":29},{"ruleId":"133","severity":1,"message":"134","line":26,"column":8,"nodeType":"135","endLine":26,"endColumn":15,"suggestions":"136"},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"no-unused-vars","'NotificationsActiveOutlinedIcon' is defined but never used.","Identifier","unusedVar","'HighlightOffIcon' is defined but never used.","'alertBadge' is assigned a value but never used.","'setIsOpen' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'counter'. Either include it or remove the dependency array.","ArrayExpression",["139"],"no-global-assign","no-unsafe-negation",{"desc":"140","fix":"141"},"Update the dependencies array to be: [counter, param]",{"range":"142","text":"143"},[752,759],"[counter, param]"]